This file will have information about the protocol used for the
communication between the "server" and the "client"

The communication will be packet based over a reliable network
where some assumptions about the underlying transport protocol
are made. 

We assume that the protocol used for transfer of any such "packets"
will be RELIABLE, IN-ORDER, and GAURANTEED. 

For this purpose we will use the most widely used transport protocol
and that will be TCP over IP. TCP/IP. 

We will be using sockets library provided by the operating system
to make use of this protocol. 

** Now we will start discussing in regards of the actual chat protocol

The purpose of networking sub-system is just processing of the "packets"
, it is not our job to process the "packet" and extract any relevant
information. That part will be delegated to a different subsystem. 

There are a few ways we can do this, after reading on the internet, 
and finding some information on stack overflow which I quote 
https://stackoverflow.com/questions/769045/when-i-send-a-packet-over-tcp-it-is-split-into-two-packets
, the answer by Jon Skeet explains that the TCP data is sent as a stream
and that we should not make assumptions on how you will receive the
stream on the other end of the communication channel. And that the 
best solution is to prefix the stream with a 32 bit size integer, but 
you should also not assume that the 32 bits will be read at once. 

STATE CYCLE

1. WAITING FOR CONNECT
2. CONNECT
3. WAITING FOR DATA
4. HEADER SENT
5. DATA SENT
6. WAITING FOR MORE
7. EITHER GO TO 3, OR 8
8. CONNECTION END 

Header information required for the protocol. 

All of the bytes have to in reverse order, which mean byte 0 comes last, 
and byte 8 comes first. 

***
The protocol only has a 8 byte header.
The eight bytes does both setting up the expectations for the
entire length of the stream "packet", and set the stream length
for the headers only. Along with that it also has a one byte magic
that is used to confirm that the protocol is the one we are expecting. 

(byte 1: magic header (0XD0))
(byte 2: header length * 16)
(byte 3-8: six bytes are used to set the packet length)
***

The rest of the protocol is variable, using variables to set the
expectations. 
The only mandatory variable in a header is "action", which has to be 
one of the accepted actions, such as "notification", "create", "update"
etc. 

variables in headers. 
Header has to be aligned on a 16 byte boundary, and the following 
is how you can set variables in a given header. 
when aliging on a byte boundary spaces must be used, tabs are not accepted
""""
action = update 
""""

in both the key and the value following alphanumerics are accepted
A-Z a-z '_' '-' '.' '/' 0-9

so key value pair of 
""""
90._/abc : abc/abc/..-99
"""" is a completely valid key value pair. (not that it makes sense)
as you might have noticed we can use both "=" or ":" for assignment

NOTIFICATION (action-type)
: notification is an action type that is used to send server some 
important information that does not needs to be saved to any file but 
instead needs to be shown to the server either by a notification popup
or somewhere where the user will be able to see the information. 

ATTRIBUTES:
until now we only accept two attributes for a packet. 
the first attribute is the filename, and the other is crc. 

filenames can be upto 256 chars. 
crc will be crc32