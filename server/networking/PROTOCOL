This file will have information about the protocol used for the
communication between the "server" and the "client"

The communication will be packet based over a reliable network
where some assumptions about the underlying transport protocol
are made. 

We assume that the protocol used for transfer of any such "packets"
will be RELIABLE, IN-ORDER, and GAURANTEED. 

For this purpose we will use TCP over IP.

We will be using sockets library provided by linux.

DBP - device backup protocol: 

The purpose of our networking sub-system is just processing of the "headers"
and separating the different requests on a stream based protocol. 
We will delegate the processing of the "packets" to the subsystem responsible
for processing of the type of the request. 

On an answer on stackoverflow:
https://stackoverflow.com/questions/769045/when-i-send-a-packet-over-tcp-it-is-split-into-two-packets
, Jon Skeet explains that the TCP data is sent as a stream
and that we should not make assumptions on how you will receive the
stream on the other end of the communication channel. And that the 
best solution is to prefix the stream with a 32 bit size integer, but 
you should also not assume that the 32 bits will be read at once. 

STATE CYCLE

1. waiting to connect
2. connected to client
3. waiting for client request
4. header sent/receive
5. data sent/receive
6. response to the client [if required]
7. loop back to 3 or if connection end requested go next
8. connection terminated


Header Information: 

On server end we will be processing the first 8 bytes as if it were a 8 byte long. 
But since intel is little endian and networking is processed byte-by-byte,
so the networking header might not match what you expect for it to be, it will be 
in reverse order.

First 8 bytes: 
The first eight bytes have quite a few purposes.
first it help with setting up the expectations for the entire packet length. 
it also help us to know the size of the header, 
and then it also has a magic byte that lets us know that the protocol is correct.

(byte 8: magic header (0XD0))
(byte 7 * 16: header length )
(byte 1-6: first six bytes are used to set the data length)

***

The rest of the header is variable, using key value pairs to provide information
The only mandatory key:value pair in a header is "action", which has to be 
one of the accepted actions, such as "notification", "create", "update" etc. 

key value pairs: 
Header has to be aligned on a 16 byte boundary, and the following 
is how you can set variables in a given header. 
when aliging on a byte boundary spaces must be used, tabs are not accepted.
for both the key and the value following alphanumerics are accepted: 
A-Z a-z '_' '-' '.' '/' 0-9

so key value pair: 
90._/abc : abc/abc/..-99

is a completely valid key value pair. (not that it makes sense)
we can use both "=" or ":" for assignment

Action types: 

notification is an action type that is used to send server some 
important information that does not needs to be saved but 
instead needs to be shown to the server either by a notification popup
or somewhere the user will be able to see the information. 