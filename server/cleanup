networking/*
parser/*
binarysearch -- no allocations
strings -- no allocations in file
list -- allocations not tracked by memory list
hash_table -- allocations not tracked by memory list
memory.c -- no allocations for internal use

for config.c

If you have a file that is say for example 512 bytes, and you have a 
buffer size of 128 bytes, assuming that no single statement (including newline)
is greater than the buffer size, how would you read the file and process it. 
the file must be read while the parsing is done, so we say read 128 bytes and 
parse them, and then read another 128 bytes and so on. 

so first I read first 128 bytes, and parse them, 
the parser will return EOF when the last token is processed. 
once we receive an EOF then we check the file to see if there is more data to be processed. 
Now it is also possible that EOF is returned when only half of the statement was read. 
consider "abc=defghijklmno"
here if buffer holds "abc=def", then it will return EOF and we must make sure to fill the buffer
starting before the statement start. 
(if the statement start at buffer index 0, throw error statement too long)
so the buffer must hold atleast "abc=def\n"